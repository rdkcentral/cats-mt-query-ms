# Copyright 2024 Comcast Cable Communications Management, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0


# generated by fastapi-codegen:
#   filename:  swagger.yml
#   timestamp: 2023-11-08T04:40:39+00:00

from __future__ import annotations

from typing import Optional, Union

from fastapi import FastAPI, Query
from fastapi.templating import Jinja2Templates
from fastapi import Request
import uvicorn

import os
import logging

from mt_query.router import endpoints

from mt_query.model.models import (
    Aggregate,
    Capability,
    CapabilityV2,
    Firmware,
    Identity,
    LeaseArray,
    Netwatch,
)

debug_flag = False
try:
    tmp = os.environ["DEBUG"]
    if tmp == "1" or tmp.lower() == "true":
        debug_flag = True
except KeyError:
    # ignore env var not set since default for debug_enable is False.
    pass

# set log level
logging.basicConfig()
log_level = logging.WARNING
if debug_flag:
    log_level = logging.DEBUG
logging.getLogger("paramiko").setLevel(log_level)

app = FastAPI(
    description='A microservice for querying Mikrotik router health information.',
    version='1.0.0',
    title='mt-query-ms',
    root_path="/mtquery"
)
templates = Jinja2Templates(directory="mt_query/templates")


@app.post(
    '/api/router', response_model=None, responses={'201': {'model': Aggregate}}, tags=['v1']
)
def router_endpoints_get_aggregate_v1(
        body: Capability = None,
) -> Union[None, Aggregate]:
    return endpoints.get_aggregate_v1(body)


@app.post(
    '/api/router/capability',
    response_model=None,
    responses={'201': {'model': CapabilityV2}},
    tags=['v1'],
)
def router_endpoints_get_capability_v1(
        body: Capability = None,
) -> Union[None, CapabilityV2]:
    return endpoints.get_capability_v1(body)


@app.get(
    '/api/v2/router',
    response_model=None,
    responses={'201': {'model': Aggregate}},
    tags=['v2'],
)
def router_endpoints_get_aggregate(
        host: Optional[str] = None,
        show_default: Optional[bool] = Query(False, alias='showDefault'),
        show_disabled: Optional[bool] = Query(False, alias='showDisabled'),
) -> Union[None, Aggregate]:
    """
    Fetch all health information on a router
    """
    return endpoints.get_aggregate(host, show_disabled, show_default)


@app.get(
    '/api/v2/router/capability',
    response_model=None,
    responses={'201': {'model': CapabilityV2}},
    tags=['v2'],
)
def router_endpoints_get_capability(
        host: Optional[str] = None,
        show_default: Optional[bool] = Query(False, alias='showDefault'),
        show_disabled: Optional[bool] = Query(False, alias='showDisabled'),
) -> Union[None, CapabilityV2]:
    """
    Fetch leases for router capabilities.
    """
    return endpoints.get_capability(host, show_disabled, show_default)


@app.get(
    '/api/v2/router/firmware',
    response_model=None,
    responses={'201': {'model': Firmware}},
    tags=['v2'],
)
def router_endpoints_get_firmware(host: Optional[str] = None) -> Union[None, Firmware]:
    """
    Fetch firmware information from router
    """
    return endpoints.get_firmware(host)


@app.get(
    '/api/v2/router/identity',
    response_model=None,
    responses={'201': {'model': Identity}},
    tags=['v2'],
)
def router_endpoints_get_identity(host: Optional[str] = None) -> Union[None, Identity]:
    """
    Fetch system identity
    """
    return endpoints.get_identity(host)


@app.get(
    '/api/v2/router/leases',
    response_model=None,
    responses={'201': {'model': LeaseArray}},
    tags=['v2'],
)
def router_endpoints_get_leases(host: Optional[str] = None) -> Union[None, LeaseArray]:
    """
    Fetch all DHCP leases from router.
    """
    return endpoints.get_leases(host)


@app.get(
    '/api/v2/router/netwatch',
    response_model=None,
    responses={'201': {'model': Netwatch}},
    tags=['v2'],
)
def router_endpoints_get_netwatch(host: Optional[str] = None) -> Union[None, Netwatch]:
    """
    Fetch netwatch list from router.
    """
    return endpoints.get_netwatch(host)


@app.get(
    '/api/v3/router/',
    response_model=None,
    responses={'201': {'model': Aggregate}},
    tags=['v3'],
)
def router_endpoints_get_aggregate_v3(
        host: Optional[str] = None,
        show_default: Optional[bool] = Query(False, alias='showDefault'),
        show_disabled: Optional[bool] = Query(False, alias='showDisabled'),
) -> Union[None, Aggregate]:
    return endpoints.get_aggregate_v3(host, show_disabled, show_default)


@app.get("/api")
def home(request: Request):
    return templates.TemplateResponse("home.html", context={"request": request})


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=9647)
